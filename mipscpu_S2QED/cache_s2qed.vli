constraint i_mem_valid := 
if(cache_instance1/State == cache_instance1/STATE_POPULATE)
  i_MEM_Valid;
//i_MEM_Valid == !o_Valid_1;
endif;
end constraint;

constraint i_mem_data_read :=
if(cache_instance1/State == cache_instance1/STATE_WRITEOUT)
  i_MEM_Data_Read;
endif;
end constraint;

constraint i_mem_last :=
if (cache_instance1/Gen_Count == 3) 
  i_MEM_Last;
else
  !i_MEM_Last;
endif;
end constraint;


macro unsigned MAX_INDEX :=
  unsigned((32'd1<<INDEX_WIDTH)-1);
end macro;

macro boolean cache1_state_ready :=
  cache_instance1/State == cache_instance1/STATE_READY
end macro;

macro boolean cache2_state_ready :=
  cache_instance2/State == cache_instance2/STATE_READY
end macro;

macro boolean cache1_flushed_state:=
  foreach r in 0..MAX_INDEX:  
           ((cache_instance1/databank/mem[r] == 0) && (cache_instance1/databank1/mem[r] == 0) && (cache_instance1/databank2/mem[r] ==0) &&
           (cache_instance1/databank3/mem[r] ==0));
        end foreach
end macro;

macro boolean cache1_stable_databank0(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance1/databank/mem[i] == prev(cache_instance1/databank/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean cache1_stable_databank1(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance1/databank1/mem[i] == prev(cache_instance1/databank1/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean cache1_stable_databank2(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance1/databank2/mem[i] == prev(cache_instance1/databank2/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean cache1_stable_databank3(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance1/databank3/mem[i] == prev(cache_instance1/databank3/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean write_databank0(unsigned block_offset;unsigned index;unsigned i_write_data;unsigned mem_data_0):=
  if (block_offset == 0)
    cache_instance1/databank/mem[index] == i_write_data;
  else
    cache_instance1/databank/mem[index] == mem_data_0;
  endif;
end macro;

macro boolean write_databank1(unsigned block_offset;unsigned index;unsigned i_write_data;unsigned mem_data_1):=
  if (block_offset == 1)
    cache_instance1/databank1/mem[index] == i_write_data;
  else
    cache_instance1/databank1/mem[index] == mem_data_1;
  endif;
end macro;

macro boolean write_databank2(unsigned block_offset;unsigned index;unsigned i_write_data;unsigned mem_data_2):=
  if (block_offset == 2)
    cache_instance1/databank2/mem[index] == i_write_data;
  else
    cache_instance1/databank2/mem[index] == mem_data_2;
  endif;
end macro;

macro boolean write_databank3(unsigned block_offset;unsigned index;unsigned i_write_data;unsigned mem_data_3):=
  if (block_offset == 3)
    cache_instance1/databank3/mem[index] == i_write_data;
  else
    cache_instance1/databank3/mem[index] == mem_data_3;
  endif;
end macro;


macro boolean cache2_stable_databank0(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance2/databank/mem[i] == prev(cache_instance2/databank/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean cache2_stable_databank1(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance2/databank1/mem[i] == prev(cache_instance2/databank1/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean cache2_stable_databank2(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance2/databank2/mem[i] == prev(cache_instance2/databank2/mem[i]);
    endif;
  end foreach;
end macro;

macro boolean cache2_stable_databank3(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
      cache_instance2/databank3/mem[i] == prev(cache_instance2/databank3/mem[i]);
    endif;
  end foreach;
end macro;


macro boolean cache1_stable_valid_array(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
       cache_instance1/Tag_Array[i] == prev(cache_instance1/Tag_Array[i]);
    endif;
  end foreach;
end macro;


macro boolean cache1_stable_tag_array(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
       cache_instance1/Valid_Array[i] == prev(cache_instance1/Valid_Array[i]);
    endif;
  end foreach;
end macro;

macro boolean cache1_stable_dirty_array(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
       cache_instance1/Dirty_Array[i] == prev(cache_instance1/Dirty_Array[i]);
    endif;
  end foreach;
end macro;


macro boolean cache2_stable_valid_array(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
       cache_instance1/Tag_Array[i] == prev(cache_instance1/Tag_Array[i]);
    endif;
  end foreach;
end macro;


macro boolean cache2_stable_tag_array(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
       cache_instance1/Valid_Array[i] == prev(cache_instance1/Valid_Array[i]);
    endif;
  end foreach;
end macro;

macro boolean cache2_stable_dirty_array(unsigned index):=
  foreach i in 0..MAX_INDEX:
    if (i != index)
       cache_instance1/Dirty_Array[i] == prev(cache_instance1/Dirty_Array[i]);
    endif;
  end foreach;
end macro;

property base_write_miss_not_valid;
disable iff: !i_Reset_n;
dependencies: i_mem_valid,i_mem_last;

freeze:
	index = cache_instance1/i_Index@t,
  tag = cache_instance1/i_Tag@t,
	i_write_data = i_Write_Data@t,
	block_offset = cache_instance1/i_BlockOffset@t,
	o_mem_data = o_MEM_Data_1@t,
	mem_data_0 = i_MEM_Data@t+1,
	mem_data_1 = i_MEM_Data@t+2,
	mem_data_2 = i_MEM_Data@t+3,
	mem_data_3 = i_MEM_Data@t+4;
	
assume:
at t: i_Valid && !o_Valid_1;
at t: !cache_instance1/Valid_Array[index];
at t: cache1_flushed_state;
at t: cache1_state_ready;
at t: !i_Read_Write_n;

prove:
at t+1: o_MEM_Read_Write_n_1;
at t+3: write_databank0(block_offset,index,i_write_data,mem_data_0);
at t+3: cache1_stable_databank0(index);
at t+4: write_databank1(block_offset,index,i_write_data,mem_data_1);
at t+4: cache1_stable_databank1(index);
at t+5: write_databank2(block_offset,index,i_write_data,mem_data_2);
at t+5: cache1_stable_databank2(index);
at t+6: write_databank3(block_offset,index,i_write_data,mem_data_3);
at t+6: cache1_stable_databank3(index);
at t+5: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] == tag && cache_instance1/Dirty_Array[index];
at t+5: cache1_stable_dirty_array(index);
at t+5: cache1_stable_valid_array(index);
at t+5: cache1_stable_tag_array(index);
at t+5: !o_MEM_Valid_1;
at t+6: o_Valid_1;
at t+7: o_Ready_1;
at t+7: o_MEM_Data_1 == o_mem_data;   
end property;

property S2qed_write_miss_not_valid;
disable iff: !i_Reset_n;
dependencies: i_mem_valid,i_mem_last;

freeze:
	index = cache_instance1/i_Index@t,
  tag = cache_instance1/i_Tag@t,
 	o_mem_data_2 = o_MEM_Data_2@t;
 	
assume:
at t: i_Valid && !o_Valid_1 && !o_Valid_2;
at t: !cache_instance1/Valid_Array[index] &&  !cache_instance2/Valid_Array[index];
at t: cache1_flushed_state;
at t: cache1_state_ready;
at t: cache2_state_ready;
at t: !i_Read_Write_n;

prove:
at t+1: o_MEM_Read_Write_n_1;
at t+3: cache_instance1/databank/mem[index] == cache_instance2/databank/mem[index];
at t+3: cache2_stable_databank0(index);
at t+4: cache_instance1/databank1/mem[index] == cache_instance2/databank1/mem[index];
at t+4: cache2_stable_databank1(index);
at t+5: cache_instance1/databank2/mem[index] == cache_instance2/databank2/mem[index];
at t+5: cache2_stable_databank2(index);
at t+6: cache_instance1/databank3/mem[index] == cache_instance2/databank3/mem[index];
at t+6: cache2_stable_databank3(index);
at t+5: cache_instance2/Valid_Array[index] && cache_instance2/Tag_Array[index] == tag && cache_instance2/Dirty_Array[index];
at t+5: cache2_stable_valid_array(index);
at t+5: cache2_stable_tag_array(index);
at t+5: cache2_stable_dirty_array(index);
at t+5: o_MEM_Valid_1 == o_MEM_Valid_2;   //!o_MEM_Valid_2;
at t+6: o_Valid_1 == o_Valid_2;   //o_Valid_2;
at t+7: o_Ready_1 == o_Ready_2;   //o_Ready_2;
at t+7: o_MEM_Data_2 == o_mem_data_2;
end property;



property base_write_miss_valid;
disable iff: !i_Reset_n;
dependencies: i_mem_valid,i_mem_last;

freeze:
	index = cache_instance1/i_Index@t,
  tag = cache_instance1/i_Tag@t,
	i_write_data = i_Write_Data@t,
	block_offset = cache_instance1/i_BlockOffset@t,
	o_mem_data = o_MEM_Data_1@t,
	mem_data_0 = i_MEM_Data@t+1,
	mem_data_1 = i_MEM_Data@t+2,
	mem_data_2 = i_MEM_Data@t+3,
	mem_data_3 = i_MEM_Data@t+4;
	
assume:
at t: i_Valid && !o_Valid_1;
at t: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] != tag && !cache_instance1/Dirty_Array[index];
at t: cache1_flushed_state;
at t: cache1_state_ready;
at t: !i_Read_Write_n;

prove:
at t+1: o_MEM_Read_Write_n_1;
at t+3: write_databank0(block_offset,index,i_write_data,mem_data_0);
at t+3: cache1_stable_databank0(index);
at t+4: write_databank1(block_offset,index,i_write_data,mem_data_1);
at t+4: cache1_stable_databank1(index);
at t+5: write_databank2(block_offset,index,i_write_data,mem_data_2);
at t+5: cache1_stable_databank2(index);
at t+6: write_databank3(block_offset,index,i_write_data,mem_data_3);
at t+6: cache1_stable_databank3(index);
at t+5: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] == tag && cache_instance1/Dirty_Array[index];
at t+5: cache1_stable_dirty_array(index);
at t+5: cache1_stable_valid_array(index);
at t+5: cache1_stable_tag_array(index);
at t+5: !o_MEM_Valid_1;
at t+6: o_Valid_1;
at t+7: o_Ready_1;
at t+7: o_MEM_Data_1 == o_mem_data;   
end property;

property S2qed_write_miss_valid;
disable iff: !i_Reset_n;
dependencies: i_mem_valid,i_mem_last;

freeze:
	index = cache_instance1/i_Index@t,
  tag = cache_instance1/i_Tag@t,
 	o_mem_data_2 = o_MEM_Data_2@t;
 	
assume:
at t: i_Valid && !o_Valid_1 && !o_Valid_2;
at t: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] != tag && !cache_instance1/Dirty_Array[index];
at t: cache_instance2/Valid_Array[index] && cache_instance2/Tag_Array[index] != tag && !cache_instance2/Dirty_Array[index];
at t: cache1_flushed_state;
at t: cache1_state_ready;
at t: cache2_state_ready;
at t: !i_Read_Write_n;

prove:
at t+1: o_MEM_Read_Write_n_1;
at t+3: cache_instance1/databank/mem[index] == cache_instance2/databank/mem[index];
at t+3: cache2_stable_databank0(index);
at t+4: cache_instance1/databank1/mem[index] == cache_instance2/databank1/mem[index];
at t+4: cache2_stable_databank1(index);
at t+5: cache_instance1/databank2/mem[index] == cache_instance2/databank2/mem[index];
at t+5: cache2_stable_databank2(index);
at t+6: cache_instance1/databank3/mem[index] == cache_instance2/databank3/mem[index];
at t+6: cache2_stable_databank3(index);
at t+5: cache_instance2/Valid_Array[index] && cache_instance2/Tag_Array[index] == tag && cache_instance2/Dirty_Array[index];
at t+5: cache2_stable_valid_array(index);
at t+5: cache2_stable_tag_array(index);
at t+5: cache2_stable_dirty_array(index);
at t+5: o_MEM_Valid_1 == o_MEM_Valid_2;   //!o_MEM_Valid_2;
at t+6: o_Valid_1 == o_Valid_2;   //o_Valid_2;
at t+7: o_Ready_1 == o_Ready_2;   //o_Ready_2;
at t+7: o_MEM_Data_2 == o_mem_data_2;
end property;



property base_write_miss_dirty_set;
disable iff: !i_Reset_n;
dependencies: i_mem_data_read,i_mem_valid,i_mem_last;
freeze:
	index = cache_instance1/i_Index@t,
  tag = cache_instance1/i_Tag@t,
  i_write_data = i_Write_Data@t,
	block_offset = cache_instance1/i_BlockOffset@t,
  data0 = cache_instance1/databank/mem[index]@t,
	data1 = cache_instance1/databank1/mem[index]@t+1,
	data2 = cache_instance1/databank2/mem[index]@t+2,
	data3 = cache_instance1/databank3/mem[index]@t+3,
	mem_data_0 = i_MEM_Data@t+1,
	mem_data_1 = i_MEM_Data@t+2,
	mem_data_2 = i_MEM_Data@t+3,
	mem_data_3 = i_MEM_Data@t+4;
assume:
at t: i_Valid && !o_Valid_1 && !o_Valid_2;
//at t: cache_instance1/Tag_Array[index] != tag;
//at t: cache_instance1/Valid_Array[index] && cache_instance1/Dirty_Array[index];
at t: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] != tag && cache_instance1/Dirty_Array[index];
at t: cache1_flushed_state;
at t: cache1_state_ready;
at t: !i_Read_Write_n;
prove:
at t+2: o_MEM_Data_1 == data0;
at t+3: o_MEM_Data_1 == data1;
at t+4: o_MEM_Data_1 == data2;
at t+5: o_MEM_Data_1 == data3; 
at t+5: o_MEM_Read_Write_n_1;
at t+7: write_databank0(block_offset,index,i_write_data,mem_data_0);
at t+7: cache1_stable_databank0(index);
at t+8: write_databank1(block_offset,index,i_write_data,mem_data_1);
at t+8: cache1_stable_databank1(index);
at t+9: write_databank2(block_offset,index,i_write_data,mem_data_2);
at t+9: cache1_stable_databank2(index);
at t+10: write_databank3(block_offset,index,i_write_data,mem_data_3);
at t+10: cache1_stable_databank3(index);
at t+9: cache_instance1/Dirty_Array[index];
at t+9: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] == tag;
at t+9: cache1_stable_valid_array(index);
at t+9: cache1_stable_tag_array(index);
at t+9: cache1_stable_dirty_array(index);
at t+9: !o_MEM_Valid_1;
at t+10: o_Valid_1;
at t+11: o_Ready_1;
end property;


property S2qed_write_miss_dirty_set; //base_write_miss_dirty_set holds but this property doesnt hold
disable iff: !i_Reset_n;
dependencies: i_mem_data_read,i_mem_valid,i_mem_last;
freeze:
	index = cache_instance1/i_Index@t,
  tag = cache_instance1/i_Tag@t,
  data0 = cache_instance2/databank/mem[index]@t,
	data1 = cache_instance2/databank1/mem[index]@t+1,
	data2 = cache_instance2/databank2/mem[index]@t+2,
	data3 = cache_instance2/databank3/mem[index]@t+3;
assume:
at t: i_Valid && !o_Valid_1 && !o_Valid_2;
at t: cache_instance1/Valid_Array[index] && cache_instance1/Tag_Array[index] != tag && cache_instance1/Dirty_Array[index];
at t: cache_instance2/Valid_Array[index] && cache_instance2/Tag_Array[index] != tag && cache_instance2/Dirty_Array[index];
//at t: !cache_instance1/Valid_Array[index] || cache_instance1/Tag_Array[index] != tag;
//at t: !cache_instance2/Valid_Array[index] ||  cache_instance2/Tag_Array[index] != tag;
//at t: cache_instance1/Valid_Array[index] && cache_instance1/Dirty_Array[index];
//at t: cache_instance2/Valid_Array[index] && cache_instance2/Dirty_Array[index];
at t: cache1_flushed_state;
at t: cache1_state_ready;
at t: cache2_state_ready;
at t: !i_Read_Write_n;
prove:
//at t+1: o_MEM_Valid;                (o_MEM_Valid not assigned in case of read and wite hit)
//at t+2: !cache_instance2/o_MEM_Read_Write_n;  
at t+2: o_MEM_Data_2 == data0;
at t+3: o_MEM_Data_2 == data1;
at t+4: o_MEM_Data_2 == data2;
at t+5: o_MEM_Data_2 == data3;
at t+5: o_MEM_Read_Write_n_1 == o_MEM_Read_Write_n_2;
at t+7: cache_instance1/databank/mem[index] == cache_instance2/databank/mem[index];
at t+7: cache2_stable_databank0(index);
at t+8: cache_instance1/databank1/mem[index] == cache_instance2/databank1/mem[index];
at t+8: cache2_stable_databank1(index);
at t+9: cache_instance1/databank2/mem[index] == cache_instance2/databank2/mem[index];
at t+9: cache2_stable_databank2(index);
at t+10: cache_instance1/databank3/mem[index] == cache_instance2/databank3/mem[index];
at t+10: cache2_stable_databank3(index);
at t+9: cache_instance2/Dirty_Array[index];
at t+9: cache_instance2/Valid_Array[index] && cache_instance2/Tag_Array[index] == tag;
at t+9: cache2_stable_valid_array(index);
at t+9: cache2_stable_tag_array(index);
at t+9: cache2_stable_dirty_array(index);
at t+9: o_MEM_Valid_1 == o_MEM_Valid_2;
at t+10: o_Valid_1 == o_Valid_2;
at t+11: o_Ready_1 == o_Ready_2;
end property;




