property reset_prop;
assume:
  reset_sequence;
prove: 
  at t: foreach r in 0..255:  
           Mem_DP[r] == 0;
        end foreach;
  at t: RdData_DO == 0;
 // at t: RdData_DN == 0;
end property;


property data_read_sram;
disable iff: !Rst_RBI;
assume:
  at t: CSel_SI && !WrEn_SI;
prove:
  at t+1: RdData_DO == Mem_DP[prev(Addr_DI)];
  at t+1: (Mem_DP == prev(Mem_DP));
 // at t+1: RdData_DN == Mem_DP[prev(Addr_DI)];
end property;


property data_write_sram;
disable iff: !Rst_RBI;
freeze:
	ben_si_t = BEn_SI@t,
        addr_di_t = Addr_DI@t;
assume:
  at t: CSel_SI && WrEn_SI;
prove:
  // This statement specifies Mem_DP[Addr_DI]
  at t+1: foreach i in 0..7:
            if (ben_si_t[i])
              Mem_DP[addr_di_t][i*8+7:i*8] == prev(WrData_DI[i*8+7:i*8]);
            else
              Mem_DP[addr_di_t][i*8+7:i*8] == prev(Mem_DP[addr_di_t][i*8+7:i*8]);
          endif;
          end foreach;
  // This statement specifies all other entries in Mem_DP
  at t+1: foreach i in 0..255:
          if (i != addr_di_t)
            Mem_DP[i] == prev(Mem_DP[i]);
          endif;
        end foreach;
   at t+1:  RdData_DO == prev(Mem_DP[addr_di_t]);
 // at t+1: RdData_DN == prev(Mem_DP[addr_di_t]);
end property;


property data_read_csel_low;
disable iff: !Rst_RBI;
assume:
  at t: !CSel_SI;
//  at t: WrEn_SI || !WrEn_SI;
prove:
  at t+1: RdData_DO == prev(RdData_DO);
  at t+1: (Mem_DP == prev(Mem_DP));
 // at t+1: RdData_DN == prev(RdData_DN);
end property;


