constraint write_index_1 :=
cluster_1/memory_addr[GMEM_ADDR_WIDTH - 1:0] != axi_addr[GMEM_ADDR_WIDTH - 1:0]; 
end constraint;

constraint write_index_2 :=
cluster_2/memory_addr[GMEM_ADDR_WIDTH - 1:0] == cluster_1/memory_addr[GMEM_ADDR_WIDTH - 1:0];  
end constraint;

//need to have same instruction idata(fetched from local memory instantiated under core) which is a internal signal of black boxed module core

constraint write_data :=
foreach i in 0..15:
  cluster_1/core_memory_write_val[i] == cluster_2/core_memory_write_val[i];
//  cluster_1/idata[i] == cluster_2/idata[i];
end foreach;
end constraint;


property base_dualport_write_sram;
disable iff: !reset;
dependencies: write_index_1 ;
freeze:
  index1 = cluster_1/memory_addr[GMEM_ADDR_WIDTH - 1:0]@t,
	index2 = axi_addr[GMEM_ADDR_WIDTH - 1:0]@t;	
assume:
  at t: cluster_1/core_memory_wren[device_core_id_1] && (cluster_1/core_memory_addr[device_core_id_1][15:10] != 6'b111111) && axi_we; 
  at t: foreach i in 0..GLOBAL_MEMORY_SIZE-1:  
           cluster_1/global_memory/data[i] == 0;
        end foreach;
prove:
  // outputs of cluster
  at t: foreach i in 0..NUM_CORES-1:
          if (cluster_1/core_enable[i])
            device_core_id_1 == i;
          endif;
        end foreach;
  at t:  device_addr_1 == cluster_1/core_memory_addr[device_core_id_1][9:0];
  at t: !device_write_en_1 && !device_read_en_1;
  at t: device_data_out_1 == cluster_1/core_memory_write_val[device_core_id_1];
  // This statement specifies data[index]
  at t+1: cluster_1/global_memory/data[index1] == prev(cluster_1/core_memory_write_val[device_core_id_1]);   // first port write
  at t+1: cluster_1/global_memory/data[index2] == prev(axi_data);                                           // second port write 
  at t+1: cluster_1/global_mem_q == prev(cluster_1/core_memory_write_val[device_core_id_1]);               //q_a -- first read output
  at t+1: axi_q_1 == prev(axi_data);                                                                      //q_b -- second read output
  // This statement specifies all other entries in data reg
  at t+1: foreach i in 0..GLOBAL_MEMORY_SIZE-1:
            if (i != index1 && i != index2)
              cluster_1/global_memory/data[i] == prev(cluster_1/global_memory/data[i]);
            endif;
          end foreach;          
end property;

property S2qed_dualport_write_sram;
disable iff: !reset;
dependencies: write_index_1 ,write_index_2,write_data;
freeze:
  index1 = cluster_1/memory_addr[GMEM_ADDR_WIDTH - 1:0]@t,
	index2 = axi_addr[GMEM_ADDR_WIDTH - 1:0]@t;	
assume:
  at t: cluster_1/core_memory_wren[device_core_id_1] && (cluster_1/core_memory_addr[device_core_id_1][15:10] != 6'b111111)  && cluster_2/core_memory_wren[device_core_id_1] && (cluster_2/core_memory_addr[device_core_id_1][15:10] != 6'b111111) && axi_we; 
  at t: foreach i in 0..GLOBAL_MEMORY_SIZE-1:  
          cluster_1/global_memory/data[i] == 0;
        end foreach;
prove:
  // outputs of cluster
 at t: foreach i in 0..NUM_CORES-1:
          if (cluster_2/core_enable[i])
            device_core_id_2 == i;
          endif;
        end foreach;
 at t:  device_addr_2 == cluster_2/core_memory_addr[device_core_id_1][9:0];
 at t: !device_write_en_2 && !device_read_en_2;
 at t: device_data_out_2 == cluster_2/core_memory_write_val[device_core_id_2];
 at t+1: cluster_1/global_memory/data[index2] == cluster_2/global_memory/data[index2]; //first_write_port
 at t+1: cluster_1/global_memory/data[index1] == cluster_2/global_memory/data[index1]; //second_write_port
 at t+1: cluster_1/global_mem_q == cluster_2/global_mem_q;                             //first_read_port
 at t+1: axi_q_1 == axi_q_2;                                                           //second_read_port
   // This statement specifies all other entries in data reg
 at t+1: foreach i in 0..GLOBAL_MEMORY_SIZE-1:
           if (i != index1 && i != index2)
             cluster_2/global_memory/data[i] == prev(cluster_2/global_memory/data[i]);
           endif;
         end foreach;  
end property;
